(define (domain omnigibson)
    (:requirements :strips :typing :adl)
    (:types $type_list)
    
    (:predicates 
        (cooked ?obj1)
        (frozen ?obj1)
        (open ?obj1)
        (folded ?obj1)
        (unfolded ?obj1)
        (toggled_on ?obj1)
        (hot ?obj1)
        (on_fire ?obj1)
        (future ?obj1)
        (real ?obj1)
        (saturated ?obj1 ?obj2)
        (covered ?obj1 ?obj2)
        (filled ?obj1 ?obj2)
        (contains ?obj1 ?obj2)
        (ontop ?obj1 ?obj2)
        (nextto ?obj1 ?obj2)
        (under ?obj1 ?obj2)
        (touching ?obj1 ?obj2)
        (inside ?obj1 ?obj2)
        (overlaid ?obj1 ?obj2)
        (attached ?obj1 ?obj2)
        (draped ?obj1 ?obj2)
        (insource ?obj1 ?obj2)
        (inroom ?obj1 ?obj2)
        (broken ?obj1)
        (grasped ?obj1 ?obj2)
    )
    

    ;; Place the currently grasped object on top of another object
    (:action place_on_top
        :parameters (?obj1 ?obj2)
        :precondition ()
        :effect (covered ?obj1 ?obj2) ;;cover ontop
    )



    #|
    ;; Grasp an object
    (:action grasp
        :parameters (?obj1 ?obj2)
        :precondition ()
        :effect (grasped ?obj1 ?obj2)
    )

    ;; Place the currently grasped object on top of another object
    (:action place_on_top
        :parameters (?obj1 ?obj2)
        :precondition ()
        :effect (covered ?obj1 ?obj2) ;;cover ontop
    )


    ;; Place the currently grasped object inside another object
    (:action place_inside
        :parameters (?obj1 ?obj2)
        :precondition ()
        :effect (contains ?obj1 ?obj2) ;;contains inside
    )

    ;; Open an object
    (:action open_object
        :parameters (?obj)
        :precondition ()
        :effect (open ?obj)
    )
    
    ;; Navigate to an object
    (:action navigate_to
        :parameters (?obj1 ?obj2)
        :precondition ()
        :effect (inroom ?obj1 ?obj2) 
    )

    ;; Toggle an object on
    (:action toggle_on
        :parameters (?obj1)
        :precondition ()
        :effect (toggled_on ?obj1)
    )





    
    (:action fill
        :parameters (?obj1 ?obj2)
        :precondition ()
        :effect (filled ?obj1 ?obj2)
    )

    (:action put_in
        :parameters (?obj1 ?obj2)
        :precondition ()
        :effect (contains ?obj1 ?obj2)
    )

    (:action cover
        :parameters (?obj1 ?obj2)
        :precondition ()
        :effect (and (covered ?obj1 ?obj2))
    )
    |#


)
