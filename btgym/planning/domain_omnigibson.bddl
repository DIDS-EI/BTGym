(define (domain omnigibson)
    (:requirements :strips :typing :adl)
    (:types $type_list)
    
    (:predicates 
        (cooked ?obj1)
        (frozen ?obj1)
        (open ?obj1)
        (folded ?obj1)
        (unfolded ?obj1)
        (toggled_on ?obj1)
        (hot ?obj1)
        (on_fire ?obj1)
        (future ?obj1)
        (real ?obj1)
        (saturated ?obj1 ?obj2)
        (covered ?obj1 ?obj2)
        (filled ?obj1 ?obj2)
        (contains ?obj1 ?obj2)
        (ontop ?obj1 ?obj2)
        (nextto ?obj1 ?obj2)
        (under ?obj1 ?obj2)
        (touching ?obj1 ?obj2)
        (inside ?obj1 ?obj2)
        (overlaid ?obj1 ?obj2)
        (attached ?obj1 ?obj2)
        (draped ?obj1 ?obj2)
        (insource ?obj1 ?obj2)
        (inroom ?obj1 ?obj2)
        (broken ?obj1)
        (grasped ?obj1 ?obj2)
    )

    (:action uncook
        :parameters (?obj1)
        :precondition (cooked ?obj1)
        :effect (not (cooked ?obj1))
    )

    (:action unfreeze 
        :parameters (?obj1)
        :precondition (frozen ?obj1)
        :effect (not (frozen ?obj1))
    )

    (:action toggle_off
        :parameters (?obj1)
        :precondition (toggled_on ?obj1)
        :effect (not (toggled_on ?obj1))
    )

    (:action cool_down
        :parameters (?obj1)
        :precondition (hot ?obj1)
        :effect (not (hot ?obj1))
    )

    (:action extinguish
        :parameters (?obj1)
        :precondition (on_fire ?obj1)
        :effect (not (on_fire ?obj1))
    )

    (:action make_past
        :parameters (?obj1)
        :precondition (future ?obj1)
        :effect (and
            (not (future ?obj1))
            (real ?obj1)
        )
    )

    (:action make_future
        :parameters (?obj1)
        :precondition (real ?obj1)
        :effect (and
            (not (real ?obj1))
            (future ?obj1)
        )
    )

    (:action unsaturate
        :parameters (?obj1 ?obj2)
        :precondition (saturated ?obj1 ?obj2)
        :effect (not (saturated ?obj1 ?obj2))
    )

    (:action uncover
        :parameters (?obj1 ?obj2)
        :precondition (covered ?obj1 ?obj2)
        :effect (not (covered ?obj1 ?obj2))
    )

    (:action empty
        :parameters (?obj1 ?obj2)
        :precondition (filled ?obj1 ?obj2)
        :effect (not (filled ?obj1 ?obj2))
    )
    (:action cook
        :parameters (?obj1)
        :precondition (not (cooked ?obj1))
        :effect (cooked ?obj1)
    )

    (:action freeze
        :parameters (?obj1)
        :precondition (not (frozen ?obj1))
        :effect (frozen ?obj1)
    )

    (:action open_container
        :parameters (?obj1)
        :precondition (not (open ?obj1))
        :effect (open ?obj1)
    )

    (:action close_container
        :parameters (?obj1)
        :precondition (open ?obj1)
        :effect (not (open ?obj1))
    )

    (:action fold
        :parameters (?obj1)
        :precondition (not (folded ?obj1))
        :effect (folded ?obj1)
    )

    (:action unfold
        :parameters (?obj1)
        :precondition (not (unfolded ?obj1))
        :effect (unfolded ?obj1)
    )

    (:action toggle_on
        :parameters (?obj1)
        :precondition (not (toggled_on ?obj1))
        :effect (toggled_on ?obj1)
    )

    (:action heat_up
        :parameters (?obj1)
        :precondition (not (hot ?obj1))
        :effect (hot ?obj1)
    )

    (:action ignite
        :parameters (?obj1)
        :precondition (not (on_fire ?obj1))
        :effect (on_fire ?obj1)
    )

    (:action mark_future
        :parameters (?obj1)
        :precondition (not (future ?obj1))
        :effect (future ?obj1)
    )

    (:action make_real
        :parameters (?obj1)
        :precondition (not (real ?obj1))
        :effect (real ?obj1)
    )

    (:action saturate
        :parameters (?obj1 ?obj2)
        :precondition (not (saturated ?obj1 ?obj2))
        :effect (saturated ?obj1 ?obj2)
    )

    (:action cover
        :parameters (?obj1 ?obj2)
        :precondition (not (covered ?obj1 ?obj2))
        :effect (covered ?obj1 ?obj2)
    )

    (:action fill
        :parameters (?obj1 ?obj2)
        :precondition (not (filled ?obj1 ?obj2))
        :effect (filled ?obj1 ?obj2)
    )

    (:action put_in
        :parameters (?obj1 ?obj2)
        :precondition (not (contains ?obj1 ?obj2))
        :effect (contains ?obj1 ?obj2)
    )

    (:action place_ontop
        :parameters (?obj1 ?obj2)
        :precondition (not (ontop ?obj1 ?obj2))
        :effect (ontop ?obj1 ?obj2)
    )

    (:action place_nextto
        :parameters (?obj1 ?obj2)
        :precondition (not (nextto ?obj1 ?obj2))
        :effect (nextto ?obj1 ?obj2)
    )

    (:action place_under
        :parameters (?obj1 ?obj2)
        :precondition (not (under ?obj1 ?obj2))
        :effect (under ?obj1 ?obj2)
    )

    (:action touch
        :parameters (?obj1 ?obj2)
        :precondition (not (touching ?obj1 ?obj2))
        :effect (touching ?obj1 ?obj2)
    )

    (:action place_inside
        :parameters (?obj1 ?obj2)
        :precondition (not (inside ?obj1 ?obj2))
        :effect (inside ?obj1 ?obj2)
    )

    (:action overlay
        :parameters (?obj1 ?obj2)
        :precondition (not (overlaid ?obj1 ?obj2))
        :effect (overlaid ?obj1 ?obj2)
    )

    (:action attach
        :parameters (?obj1 ?obj2)
        :precondition (not (attached ?obj1 ?obj2))
        :effect (attached ?obj1 ?obj2)
    )

    (:action drape
        :parameters (?obj1 ?obj2)
        :precondition (not (draped ?obj1 ?obj2))
        :effect (draped ?obj1 ?obj2)
    )

    (:action move_into_source
        :parameters (?obj1 ?obj2)
        :precondition (not (insource ?obj1 ?obj2))
        :effect (insource ?obj1 ?obj2)
    )

    (:action enter_room
        :parameters (?obj1 ?obj2)
        :precondition (not (inroom ?obj1 ?obj2))
        :effect (inroom ?obj1 ?obj2)
    )

    (:action break
        :parameters (?obj1)
        :precondition (not (broken ?obj1))
        :effect (broken ?obj1)
    )

    (:action grasp
        :parameters (?obj1 ?obj2)
        :precondition (not (grasped ?obj1 ?obj2))
        :effect (grasped ?obj1 ?obj2)
    )


    (:action uncover
        :parameters (?obj1 ?obj2)
        :precondition (covered ?obj1 ?obj2)
        :effect (not (covered ?obj1 ?obj2))
    )

    (:action take_out
        :parameters (?obj1 ?obj2)
        :precondition (contains ?obj1 ?obj2)
        :effect (not (contains ?obj1 ?obj2))
    )

    (:action uninside
        :parameters (?obj1 ?obj2)
        :precondition (inside ?obj1 ?obj2)
        :effect (not (inside ?obj1 ?obj2))
    )

    (:action unattach
        :parameters (?obj1 ?obj2)
        :precondition (attached ?obj1 ?obj2)
        :effect (not (attached ?obj1 ?obj2))
    )


)
