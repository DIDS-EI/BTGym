(define (domain omnigibson)
    (:requirements :strips :typing :adl)
    (:types $type_list)
    
    (:predicates 
        (cooked ?obj1)
        (frozen ?obj1)
        (open ?obj1)
        (folded ?obj1)
        (unfolded ?obj1)
        (toggled_on ?obj1)
        (hot ?obj1)
        (on_fire ?obj1)
        (future ?obj1)
        (real ?obj1)
        (saturated ?obj1 ?obj2)
        (covered ?obj1 ?obj2)
        (filled ?obj1 ?obj2)
        (contains ?obj1 ?obj2)
        (ontop ?obj1 ?obj2)
        (nextto ?obj1 ?obj2)
        (under ?obj1 ?obj2)
        (touching ?obj1 ?obj2)
        (inside ?obj1 ?obj2)
        (overlaid ?obj1 ?obj2)
        (attached ?obj1 ?obj2)
        (draped ?obj1 ?obj2)
        (insource ?obj1 ?obj2)
        (inroom ?obj1 ?obj2)
        (broken ?obj1)
        (grasped ?obj1 ?obj2)
    )
    

    (:action do_cooked
        :parameters (?obj1)
        :precondition (not (cooked ?obj1))
        :effect (cooked ?obj1)
    )

    (:action undo_cooked
        :parameters (?obj1)
        :precondition (cooked ?obj1)
        :effect (not (cooked ?obj1))
    )

    (:action do_frozen
        :parameters (?obj1)
        :precondition (not (frozen ?obj1))
        :effect (frozen ?obj1)
    )

    (:action undo_frozen
        :parameters (?obj1)
        :precondition (frozen ?obj1)
        :effect (not (frozen ?obj1))
    )

    (:action do_open
        :parameters (?obj1)
        :precondition (not (open ?obj1))
        :effect (open ?obj1)
    )

    (:action undo_open
        :parameters (?obj1)
        :precondition (open ?obj1)
        :effect (not (open ?obj1))
    )

    (:action do_folded
        :parameters (?obj1)
        :precondition (not (folded ?obj1))
        :effect (folded ?obj1)
    )

    (:action undo_folded
        :parameters (?obj1)
        :precondition (folded ?obj1)
        :effect (not (folded ?obj1))
    )

    (:action do_unfolded
        :parameters (?obj1)
        :precondition (not (unfolded ?obj1))
        :effect (unfolded ?obj1)
    )

    (:action undo_unfolded
        :parameters (?obj1)
        :precondition (unfolded ?obj1)
        :effect (not (unfolded ?obj1))
    )

    (:action do_toggled_on
        :parameters (?obj1)
        :precondition (not (toggled_on ?obj1))
        :effect (toggled_on ?obj1)
    )

    (:action undo_toggled_on
        :parameters (?obj1)
        :precondition (toggled_on ?obj1)
        :effect (not (toggled_on ?obj1))
    )

    (:action do_hot
        :parameters (?obj1)
        :precondition (not (hot ?obj1))
        :effect (hot ?obj1)
    )

    (:action undo_hot
        :parameters (?obj1)
        :precondition (hot ?obj1)
        :effect (not (hot ?obj1))
    )

    (:action do_on_fire
        :parameters (?obj1)
        :precondition (not (on_fire ?obj1))
        :effect (on_fire ?obj1)
    )

    (:action undo_on_fire
        :parameters (?obj1)
        :precondition (on_fire ?obj1)
        :effect (not (on_fire ?obj1))
    )

    (:action do_future
        :parameters (?obj1)
        :precondition (not (future ?obj1))
        :effect (future ?obj1)
    )

    (:action undo_future
        :parameters (?obj1)
        :precondition (future ?obj1)
        :effect (not (future ?obj1))
    )

    (:action do_real
        :parameters (?obj1)
        :precondition (not (real ?obj1))
        :effect (real ?obj1)
    )

    (:action undo_real
        :parameters (?obj1)
        :precondition (real ?obj1)
        :effect (not (real ?obj1))
    )

    (:action do_saturated
        :parameters (?obj1 ?obj2)
        :precondition (not (saturated ?obj1 ?obj2))
        :effect (saturated ?obj1 ?obj2)
    )

    (:action undo_saturated
        :parameters (?obj1 ?obj2)
        :precondition (saturated ?obj1 ?obj2)
        :effect (not (saturated ?obj1 ?obj2))
    )

    (:action do_covered
        :parameters (?obj1 ?obj2)
        :precondition (not (covered ?obj1 ?obj2))
        :effect (covered ?obj1 ?obj2)
    )

    (:action undo_covered
        :parameters (?obj1 ?obj2)
        :precondition (covered ?obj1 ?obj2)
        :effect (not (covered ?obj1 ?obj2))
    )

    (:action do_filled
        :parameters (?obj1 ?obj2)
        :precondition (not (filled ?obj1 ?obj2))
        :effect (filled ?obj1 ?obj2)
    )

    (:action undo_filled
        :parameters (?obj1 ?obj2)
        :precondition (filled ?obj1 ?obj2)
        :effect (not (filled ?obj1 ?obj2))
    )

    (:action do_contains
        :parameters (?obj1 ?obj2)
        :precondition (not (contains ?obj1 ?obj2))
        :effect (contains ?obj1 ?obj2)
    )

    (:action undo_contains
        :parameters (?obj1 ?obj2)
        :precondition (contains ?obj1 ?obj2)
        :effect (not (contains ?obj1 ?obj2))
    )

    (:action do_ontop
        :parameters (?obj1 ?obj2)
        :precondition (not (ontop ?obj1 ?obj2))
        :effect (ontop ?obj1 ?obj2)
    )

    (:action undo_ontop
        :parameters (?obj1 ?obj2)
        :precondition (ontop ?obj1 ?obj2)
        :effect (not (ontop ?obj1 ?obj2))
    )

    (:action do_nextto
        :parameters (?obj1 ?obj2)
        :precondition (not (nextto ?obj1 ?obj2))
        :effect (nextto ?obj1 ?obj2)
    )

    (:action undo_nextto
        :parameters (?obj1 ?obj2)
        :precondition (nextto ?obj1 ?obj2)
        :effect (not (nextto ?obj1 ?obj2))
    )

    (:action do_under
        :parameters (?obj1 ?obj2)
        :precondition (not (under ?obj1 ?obj2))
        :effect (under ?obj1 ?obj2)
    )

    (:action undo_under
        :parameters (?obj1 ?obj2)
        :precondition (under ?obj1 ?obj2)
        :effect (not (under ?obj1 ?obj2))
    )

    (:action do_touching
        :parameters (?obj1 ?obj2)
        :precondition (not (touching ?obj1 ?obj2))
        :effect (touching ?obj1 ?obj2)
    )

    (:action undo_touching
        :parameters (?obj1 ?obj2)
        :precondition (touching ?obj1 ?obj2)
        :effect (not (touching ?obj1 ?obj2))
    )

    (:action do_inside
        :parameters (?obj1 ?obj2)
        :precondition (not (inside ?obj1 ?obj2))
        :effect (inside ?obj1 ?obj2)
    )

    (:action undo_inside
        :parameters (?obj1 ?obj2)
        :precondition (inside ?obj1 ?obj2)
        :effect (not (inside ?obj1 ?obj2))
    )

    (:action do_overlaid
        :parameters (?obj1 ?obj2)
        :precondition (not (overlaid ?obj1 ?obj2))
        :effect (overlaid ?obj1 ?obj2)
    )

    (:action undo_overlaid
        :parameters (?obj1 ?obj2)
        :precondition (overlaid ?obj1 ?obj2)
        :effect (not (overlaid ?obj1 ?obj2))
    )

    (:action do_attached
        :parameters (?obj1 ?obj2)
        :precondition (not (attached ?obj1 ?obj2))
        :effect (attached ?obj1 ?obj2)
    )

    (:action undo_attached
        :parameters (?obj1 ?obj2)
        :precondition (attached ?obj1 ?obj2)
        :effect (not (attached ?obj1 ?obj2))
    )

    (:action do_draped
        :parameters (?obj1 ?obj2)
        :precondition (not (draped ?obj1 ?obj2))
        :effect (draped ?obj1 ?obj2)
    )

    (:action undo_draped
        :parameters (?obj1 ?obj2)
        :precondition (draped ?obj1 ?obj2)
        :effect (not (draped ?obj1 ?obj2))
    )

    (:action do_insource
        :parameters (?obj1 ?obj2)
        :precondition (not (insource ?obj1 ?obj2))
        :effect (insource ?obj1 ?obj2)
    )

    (:action undo_insource
        :parameters (?obj1 ?obj2)
        :precondition (insource ?obj1 ?obj2)
        :effect (not (insource ?obj1 ?obj2))
    )

    (:action do_inroom
        :parameters (?obj1 ?obj2)
        :precondition (not (inroom ?obj1 ?obj2))
        :effect (inroom ?obj1 ?obj2)
    )

    (:action undo_inroom
        :parameters (?obj1 ?obj2)
        :precondition (inroom ?obj1 ?obj2)
        :effect (not (inroom ?obj1 ?obj2))
    )

    (:action do_broken
        :parameters (?obj1)
        :precondition (not (broken ?obj1))
        :effect (broken ?obj1)
    )

    (:action undo_broken
        :parameters (?obj1)
        :precondition (broken ?obj1)
        :effect (not (broken ?obj1))
    )

    (:action do_grasped
        :parameters (?obj1 ?obj2)
        :precondition (not (grasped ?obj1 ?obj2))
        :effect (grasped ?obj1 ?obj2)
    )

    (:action undo_grasped
        :parameters (?obj1 ?obj2)
        :precondition (grasped ?obj1 ?obj2)
        :effect (not (grasped ?obj1 ?obj2))
    )


)
