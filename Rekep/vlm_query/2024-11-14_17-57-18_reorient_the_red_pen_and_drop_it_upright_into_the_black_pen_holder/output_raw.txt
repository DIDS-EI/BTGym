```python
# The task involves three stages: "grasp red pen", "reorient red pen", and "keep upright and drop into pen holder".
# 1. Grasp red pen: Align the end-effector with the red pen to grasp it.
# 2. Reorient red pen: Ensure the pen is upright in relation to the z-axis.
# 3. Keep upright and drop into pen holder: Maintain the upright orientation while positioning the pen above the pen holder.

num_stages = 3

### stage 1 sub-goal constraints
def stage1_subgoal_constraint1(end_effector, keypoints):
    """Align the end-effector with the red pen at keypoint 3."""
    grasp_point = keypoints[3]
    cost = np.linalg.norm(end_effector - grasp_point)
    return cost

### stage 1 path constraints
# No path constraints are needed for this stage

### stage 2 sub-goal constraints
def stage2_subgoal_constraint1(end_effector, keypoints):
    """The red pen should be upright (parallel to the z-axis)."""
    pen_vector = keypoints[3] - end_effector
    upright_vector = np.array([0, 0, 1])
    cost = np.arccos(np.dot(pen_vector, upright_vector) / (np.linalg.norm(pen_vector) * np.linalg.norm(upright_vector)))
    return cost

### stage 2 path constraints
def stage2_path_constraint1(end_effector, keypoints):
    """The robot must still be grasping the red pen."""
    return get_grasping_cost_by_keypoint_idx(3)

### stage 3 sub-goal constraints
def stage3_subgoal_constraint1(end_effector, keypoints):
    """The red pen must stay upright (parallel to the z-axis)."""
    pen_vector = keypoints[3] - end_effector
    upright_vector = np.array([0, 0, 1])
    cost = np.arccos(np.dot(pen_vector, upright_vector) / (np.linalg.norm(pen_vector) * np.linalg.norm(upright_vector)))
    return cost

def stage3_subgoal_constraint2(end_effector, keypoints):
    """The red pen is 10cm above the opening of the pen holder at keypoint 8."""
    pen_holder_point = keypoints[8] + np.array([0, 0, 0.1])
    cost = np.linalg.norm(keypoints[3] - pen_holder_point)
    return cost

### stage 3 path constraints
def stage3_path_constraint1(end_effector, keypoints):
    """The robot must still be grasping the red pen."""
    return get_grasping_cost_by_keypoint_idx(3)

# Summarize keypoints to be grasped in all grasping stages
grasp_keypoints = [3, -1, -1]

# Summarize at the end of which stage the robot should release the keypoints
release_keypoints = [-1, -1, 3]
```