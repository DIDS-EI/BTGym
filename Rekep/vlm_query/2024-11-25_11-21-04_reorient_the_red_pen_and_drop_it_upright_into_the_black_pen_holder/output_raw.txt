```python
# The task involves 3 stages:
# 1. Grasp the red pen.
# 2. Reorient the red pen to be upright.
# 3. Drop the red pen upright into the black pen holder.

num_stages = 3

### stage 1 sub-goal constraints
def stage1_subgoal_constraint1(end_effector, keypoints):
    """Align the end-effector with the red pen (keypoint 2)."""
    red_pen = keypoints[2]
    return np.linalg.norm(end_effector - red_pen)

### stage 1 path constraints
# No path constraints needed.

### stage 2 sub-goal constraints
def stage2_subgoal_constraint1(end_effector, keypoints):
    """Ensure the red pen is upright (parallel to the z-axis)."""
    base = keypoints[1]
    tip = keypoints[2]
    pen_vector = tip - base
    z_axis = np.array([0, 0, 1])
    
    # Calculate the angle between the pen and the z-axis
    dot_product = np.dot(pen_vector, z_axis)
    pen_norm = np.linalg.norm(pen_vector)
    z_norm = np.linalg.norm(z_axis)
    angle_cost = 1 - dot_product / (pen_norm * z_norm)
    return angle_cost

### stage 2 path constraints
def stage2_path_constraint1(end_effector, keypoints):
    """The robot must still be grasping the red pen."""
    return get_grasping_cost_by_keypoint_idx(2)

### stage 3 sub-goal constraints
def stage3_subgoal_constraint1(end_effector, keypoints):
    """The red pen is 10cm above the center of the pen holder."""
    center_of_holder = np.mean(keypoints[3:7], axis=0)
    offsetted_point = center_of_holder + np.array([0, 0, 0.1])  # 10cm above
    red_pen_tip = keypoints[2]
    return np.linalg.norm(red_pen_tip - offsetted_point)

def stage3_subgoal_constraint2(end_effector, keypoints):
    """The red pen is upright (parallel to the z-axis)."""
    base = keypoints[1]
    tip = keypoints[2]
    pen_vector = tip - base
    z_axis = np.array([0, 0, 1])
    
    # Calculate the angle between the pen and the z-axis
    dot_product = np.dot(pen_vector, z_axis)
    pen_norm = np.linalg.norm(pen_vector)
    z_norm = np.linalg.norm(z_axis)
    angle_cost = 1 - dot_product / (pen_norm * z_norm)
    return angle_cost

### stage 3 path constraints
def stage3_path_constraint1(end_effector, keypoints):
    """The robot must still be grasping the red pen."""
    return get_grasping_cost_by_keypoint_idx(2)

grasp_keypoints = [2, -1, -1]
release_keypoints = [-1, -1, 2]
```