## 指令
假设你正在通过编写 Python 约束函数来控制机器人执行操作任务。操作任务以环境图像的形式给出，图像上标注了带索引的关键点，同时还有文本指令。对于每个给定的任务，请执行以下步骤：

- 确定任务涉及的阶段数量。抓取必须是独立的阶段。例如：
  - "从茶壶倒茶"：
    - 3个阶段："抓取茶壶"、"将茶壶对准杯口"和"倒液体"
  - "将红色积木放在蓝色积木上"：
    - 3个阶段："抓取红色积木"、"将红色积木放在蓝色积木上"
  - "重新定向花束并将其竖直放入花瓶"：
    - 3个阶段："抓取花束"、"重新定向花束"和"保持竖直并放入花瓶"

- 对于每个阶段，编写两种约束："子目标约束"和"路径约束"。"子目标约束"是**在阶段结束时**必须满足的约束，而"路径约束"是**在阶段内**必须满足的约束。例如：
  - "从茶壶倒液体"：
    - "抓取茶壶"阶段：
      - 1个子目标约束："将机械臂末端与茶壶手柄对齐"
      - 0个路径约束
    - "将茶壶对准杯口"阶段：
      - 1个子目标约束："茶壶壶嘴需要在杯口上方10厘米"
      - 2个路径约束："机器人必须继续抓住茶壶手柄"、"茶壶必须保持竖直以避免溢出"
    - "倒液体"阶段：
      - 2个子目标约束："茶壶壶嘴需要在杯口上方5厘米"、"茶壶壶嘴必须倾斜以倒出液体"
      - 2个路径约束："机器人必须继续抓住茶壶手柄"、"茶壶壶嘴直接位于杯口上方"
  - "将红色积木放在蓝色积木上"：
    - "抓取红色积木"阶段：
      - 1个子目标约束："将机械臂末端与红色积木对齐"
      - 0个路径约束
    - "将红色积木放在蓝色积木上"阶段：
      - 1个子目标约束："红色积木在蓝色积木上方10厘米"
      - 1个路径约束："机器人必须继续抓住红色积木"
  - "重新定向花束并将其竖直放入花瓶"：
    - "抓取花束"阶段：
      - 1个子目标约束："将机械臂末端与花束茎部对齐"
      - 0个路径约束
    - "重新定向花束"阶段：
      - 1个子目标约束："花束竖直（与z轴平行）"
      - 1个路径约束："机器人必须继续抓住花束茎部"
    - "保持竖直并放入花瓶"阶段：
      - 2个子目标约束："花束必须保持竖直（与z轴平行）"、"花束在花瓶开口上方20厘米"
      - 1个路径约束："机器人必须继续抓住花束茎部"

- 通过定义 `grasp_keypoints` 变量总结所有抓取阶段要抓取的关键点。
- 通过定义 `release_keypoints` 变量总结机器人应在哪个阶段结束时释放关键点。

**注意：**
- 每个约束接收一个虚拟末端执行器点和一组关键点作为输入，并返回一个数值成本，当成本小于或等于零时，约束被满足。
- 对于每个阶段，你可以编写0个或多个子目标约束和0个或多个路径约束。
- 避免在约束中使用"if"语句。
- 处理可变形物体（如衣物、毛巾）时避免使用路径约束。
- 你不需要考虑碰撞避免。专注于完成任务所必需的内容。
- 约束的输入如下：
  - `end_effector`：形状为 `(3,)` 的 np.array，表示末端执行器位置。
  - `keypoints`：形状为 `(K, 3)` 的 np.array，表示关键点位置。
- 对于任何需要机器人继续抓住关键点 `i` 的路径约束，你可以使用提供的函数 `get_grasping_cost_by_keypoint_idx`，通过调用 `return get_grasping_cost_by_keypoint_idx(i)`，其中 `i` 是关键点的索引。
- 在每个函数内，你可以使用原生 Python 函数、任何 NumPy 函数和提供的 `get_grasping_cost_by_keypoint_idx` 函数。
- 对于抓取阶段，你应该只编写一个将末端执行器与关键点关联的子目标约束。不需要路径约束。
- 为了移动关键点，必须在之前的某个阶段抓取其关联的物体。
- 机器人一次只能抓取一个物体。
- 抓取必须是独立于其他阶段的独立阶段。
- 你可以使用两个关键点形成一个向量，该向量可用于指定旋转（通过指定该向量与固定轴之间的角度）。
- 你可以使用多个关键点来指定一个表面或体积。
- 图像上标记的关键点从索引0开始，与给定的 `keypoints` 数组相同。
- 要使点 `i` 相对于另一点 `j`，函数应定义一个 `offsetted_point` 变量，该变量将增量添加到关键点 `j`，然后计算关键点 `i` 和 `offsetted_point` 的xyz坐标的范数。
- 如果你想指定一个未被关键点标记的位置，尝试使用多个关键点来指定位置（例如，如果所需位置在这些关键点的中心，你可以取多个关键点的平均值）。

**请按以下格式在单个 python 代码块中组织输出：**
```python

# 你对任务涉及的阶段数量以及每个阶段内容的解释。
# ...

num_stages = ?

### 第1阶段子目标约束（如果有）
def stage1_subgoal_constraint1(end_effector, keypoints):
    """在此处放置你的解释。"""
    ...
    return cost
# 根据需要添加更多子目标约束
...

### 第1阶段路径约束（如果有）
def stage1_path_constraint1(end_effector, keypoints):
    """在此处放置你的解释。"""
    ...
    return cost
# 根据需要添加更多路径约束
...

# 对更多阶段重复上述过程
...

"""
总结所有抓取阶段要抓取的关键点。
列表长度应等于阶段数量。
对于抓取阶段，写入关键点索引。对于非抓取阶段，写入-1。
"""
grasp_keypoints = [?, ..., ?]

"""
总结机器人应在**哪个阶段结束时**释放关键点。
关键点索引必须出现在 `grasp_keypoints` 中定义的较早阶段（即，只能释放之前已抓取的关键点）。
只在完成任务必要时释放物体，例如将花束放入花瓶。
列表长度应等于阶段数量。
如果要在某个阶段结束时释放关键点，在相应位置写入关键点索引。否则，写入-1。
"""
release_keypoints = [?, ..., ?]

```